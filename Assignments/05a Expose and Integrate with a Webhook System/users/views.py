from django.contrib.auth import get_user_model
from rest_framework import viewsets, status
from rest_framework.response import Response
from .models import Subscription
from .serializers import UserSerializer, SubscriptionSerializer
from django.http import HttpResponse
from django.contrib.auth.tokens import default_token_generator
from django.utils.http import urlsafe_base64_decode
from rest_framework.views import APIView
from rest_framework.permissions import AllowAny
from drf_spectacular.utils import extend_schema, extend_schema_view

User = get_user_model()


@extend_schema_view(
    tags=["User"],
    summery="the user model alows the user to register and login to the system.",
    description="CRUD operations for users.",
)
class UserViewSet(viewsets.ModelViewSet):
    queryset = User.objects.all()
    serializer_class = UserSerializer

    def list(self, request, *args, **kwargs):
        return super().list(request, *args, **kwargs)


@extend_schema_view(
    tags=["verify_email"],
    summary="Verify User Email by sending a token to the user's email.\
        The token is generated by the default token generator in Django.\
        The token is sent to the user's email and the user is verified by\
        checking the token sent to the user's email.",
    description="Verifies user's email through a token sent to their email.",
    request=None,
    responses={
        200: "Email verification successful!",
        400: "Email verification failed.",
    },
)
class VerifyEmailView(APIView):
    permission_classes = [AllowAny]

    def get(self, request, uidb64, token):
        try:
            uid = urlsafe_base64_decode(uidb64).decode()
            user = User.objects.get(pk=uid)
        except (TypeError, ValueError, OverflowError, User.DoesNotExist):
            user = None

        if user is not None and default_token_generator.check_token(user, token):
            user.is_active = True
            user.save()
            return HttpResponse("Email verification successful!")
        else:
            return HttpResponse(
                "Email verification failed.", status=status.HTTP_400_BAD_REQUEST
            )


@extend_schema_view(
    tags=["Subscriptions"],
    summary="connects the users to the topics they are subscribed to.\
        This model acts as the connection point between the two appliactions",
    description="CRUD operations for user subscriptions to topics.",
)
class SubscriptionViewSet(viewsets.ModelViewSet):
    queryset = Subscription.objects.all()
    serializer_class = SubscriptionSerializer

    def get_queryset(self):
        user = self.request.user
        if user.is_authenticated:
            return Subscription.objects.filter(user=user)
        return Subscription.objects.none()
